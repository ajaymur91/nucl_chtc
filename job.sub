# hello-chtc.sub
# My very first HTCondor submit file
#
# Specify the HTCondor Universe (vanilla is the default and is used
#  for almost all jobs), the desired name of the HTCondor log file,
#  and the desired name of the standard error file.  
#  Wherever you see $(Cluster), HTCondor will insert the queue number
#  assigned to this set of jobs at the time of submission.
universe = vanilla
executable = run_graph.sh
arguments = $(index)
output = out/$(index).out
log = log/$(Cluster).log
error = err/$(index).err

#+WantFlocking = true
#+WantGlideIn = true
#requirements = (Poolname =!= "CHTC")
#
# Specify your executable (single binary or a script that runs several
#  commands), arguments, and a files for HTCondor to store standard
#  output (or "screen output").
#  $(index) will be a integer number for each job, starting with "0"
#  and increasing for the relevant number of jobs.
#
# Specify that HTCondor should transfer files to and from the
#  computer where each job runs. The last of these lines *would* be
#  used if there were any other files needed for the executable to run.
should_transfer_files = YES
when_to_transfer_output = ON_EXIT
transfer_input_files = nucl.tar.gz,extract_connected.sh,generate_child.sh,insert.sh,M_ratio.sh,run_graph.sh,run_ti.sh,sasa.sh,work/$(index).gro,Boltzmann.R,create.sh
transfer_output_files = FE_$(index).gro,mratio$(index),FE_$(index).txt,volume_$(index).txt
#
# Tell HTCondor what amount of compute resources
#  each job will need on the computer where it runs.
request_cpus = 1
request_memory = 1GB
request_disk = 3GB

# Send the job to Held state on failure. 
# on_exit_hold = (ExitBySignal == True) || (ExitCode != 0)  
#
# # Periodically retry the jobs for 3 times with an interval 0.1 hour.   
# periodic_release =  (JobStatus==5) && (NumJobStarts < 3) && ((CurrentTime - EnteredCurrentStatus) > (60*6))
#
# Tell HTCondor to run 1 instances of our job:
#
queue 1
